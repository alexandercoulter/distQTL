% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Wasserstein_F.R
\name{Wasserstein_F}
\alias{Wasserstein_F}
\title{Wasserstein partial F-test for distribution responses.}
\usage{
Wasserstein_F(
  X,
  Y,
  test = NULL,
  lower = -Inf,
  upper = Inf,
  Q0 = NULL,
  Qm = NULL,
  C_init = NULL,
  log.p = TRUE
)
}
\arguments{
\item{X}{An \eqn{n \times p} covariate matrix (with no intercept column), whose last column is the one being tested.}

\item{Y}{An \eqn{n \times m} matrix row-wise containing quantile function response objects.}

\item{test}{A numeric integer (default \code{NULL}) between \code{1} and \code{ncol(X)} indicating which covariate to test; \code{NULL} means the last covariate of \code{X} is tested.}

\item{lower}{A numeric scalar (default \code{-Inf}) setting the lower support box constraint.}

\item{upper}{A numeric scalar (default \code{Inf}) setting the upper support box constraint.}

\item{Q0}{An optional (i.e. default \code{NULL}) \eqn{n \times m} matrix containing the fitted quantile functions from the null Fréchet regression model, i.e. the model removing the last column of \code{X}.}

\item{Qm}{An optional (i.e. default \code{NULL}) \eqn{n \times m} matrix containing the marginal Fréchet mean of the response quantile functions; is evaluated as \code{colMeans(Y)}.}

\item{C_init}{An optional (i.e. default \code{NULL}) \eqn{n \times (m + 1)} matrix containing the initial Lagrangian for the QP-problem associated with the Fréchet regression problem. Positive entries correspond to active constraints; zero values correspond to inactive constraints. \code{NULL} is equivalent to specifying \code{C_init = matrix(0, n, m + 1)}.}

\item{log.p}{A boolean value (default \code{TRUE}) specifying whether the \eqn{\log(p)}-value, rather than \eqn{p}-value, should be returned from the partial F test.}
}
\value{
A list with F statistic, p-value (\eqn{\log(p)} if specified in input), and F test degrees of freedom \eqn{df_1} and \eqn{df_2}.
}
\description{
Wasserstein partial F-test for distribution responses.
}
\examples{
# Generate `zinbinom` distributions:
n <- 100 # number of samples - nrow(X) and nrow(Y).
p <- 4   # number of covariates - ncol(X).
m <- 100 # EQF grid density - ncol(Y).
mseq <- seq(1 / (2 * m), 1 - 1 / (2 * m), length.out = m)

set.seed(31)
mydata <- fastfrechet::generate_zinbinom_qf(n = n, p = p, m = m)

X <- mydata$X # (n x p) matrix of covariates
Y <- mydata$Y # (n x m) matrix of EQFs, stored row-wise

# Run Wasserstein F test on last covariate:
output <- Wasserstein_F(X, Y, lower = 0, log.p = FALSE)

# p-value is low:
output$p_value
}
